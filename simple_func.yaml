AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Function triggered by REST API Gateway GET/POST request behind a VPC, with DynamoDB integration

Parameters:
  VPCName:
    Type: String
    Default: SimpleLambdaFuncVPC
    Description: The name of the VPC

Resources:
  # VPC
  SimpleLambdaFuncVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SimpleLambdaFuncVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Lambda to access VPC resources
      VpcId: !Ref SimpleLambdaFuncVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource: !GetAtt MyDynamoDBTable.Arn

  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: MyDynamoDBTable

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from uuid import uuid4

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.getenv('DYNAMODB_TABLE'))

          def lambda_handler(event, context):
              if event['httpMethod'] == 'POST':
                  # Add data to DynamoDB table
                  item = json.loads(event['body'])
                  item['id'] = str(uuid4())
                  table.put_item(Item=item)
                  return {
                      'statusCode': 200,
                      'body': json.dumps({'message': 'Item added', 'item': item})
                  }
              elif event['httpMethod'] == 'GET' and event['path'] == '/items':
                  # Retrieve all records from DynamoDB table
                  response = table.scan()
                  return {
                      'statusCode': 200,
                      'body': json.dumps({'items': response['Items']})
                  }
              elif event['httpMethod'] == 'GET' and event['path'] == '/hello':
                  # Simple Hello World response
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Hello, World!')
                  }
              else:
                  return {
                      'statusCode': 400,
                      'body': json.dumps({'message': 'Unsupported method'})
                  }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt MySecurityGroup.GroupId
        SubnetIds:
          - !Ref MySubnet
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref MyDynamoDBTable

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: LambdaRestAPI

  RestApiResourceItems:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: items

  RestApiResourceHello:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: hello

  RestApiMethodGetItems:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RestApiResourceItems
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - AWSRegion: !Ref AWS::Region
            LambdaArn: !GetAtt MyLambdaFunction.Arn

  RestApiMethodGetHello:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RestApiResourceHello
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - AWSRegion: !Ref AWS::Region
            LambdaArn: !GetAtt MyLambdaFunction.Arn

  RestApiMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - AWSRegion: !Ref AWS::Region
            LambdaArn: !GetAtt MyLambdaFunction.Arn

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      StageName: prod

  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*

Outputs:
  ApiUrl:
    Description: URL to trigger the Lambda function
    Value: !Sub
      - https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
      - RestApi: !Ref RestApi
